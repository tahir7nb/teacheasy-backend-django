import json
from django.shortcuts import render
from django.http import HttpResponse
from rest_framework.decorators import api_view
from rest_framework import status

from toolsApp.google_auth_helper import verify_token
from toolsApp.openai_client import get_response_from_openai



@api_view(["POST"])
def verify_session_token(request):
    try:
        token = request.META.get('HTTP_TOKEN', '')
        if token:
            is_token_valid = verify_token(token)

            if is_token_valid:
                return HttpResponse(json.dumps({'Success': 'Valid token.'}),content_type="application/json", status=status.HTTP_200_OK)
            else:
                return HttpResponse(json.dumps({'Failure': 'Invalid token.'}),content_type="application/json", status=status.HTTP_200_OK)
        else:
            return HttpResponse(json.dumps({'Failure': 'Invalid request.'}),content_type="application/json", status=status.HTTP_200_OK)
    except Exception as e:
        print(e)
        print('Exception in toolsApp.views.verify_session_token')
        return HttpResponse(json.dumps({'Failure': 'Exception occured in verify_session_token.'}),content_type="application/json", status=status.HTTP_200_OK)
            

@api_view(["POST"])
def get_lesson_planner_response(request):
    try:
        token = request.META.get('HTTP_TOKEN', '')
        print(f'get_lesson_planner_response {request.data} {token}')
        grade_level = request.data.get('grade', '')
        topic = request.data.get('subject', '')
        additional_reqs = request.data.get('additional_requirements', '')
        academic_standard = request.data.get('standards_to_align', '')

        messages = request.data.get('messages', [])
        
        if token:
            is_token_valid = verify_token(token)
            if is_token_valid:
                if grade_level and topic and additional_reqs and academic_standard:
                    prompt = f"""Create a {grade_level} level comprehensive lesson plan that explores {topic}. Consider incorporating additional objectives {additional_reqs} to enhance the depth of your lesson. Ensure that your lesson aligns with the following academic standards: {academic_standard}.
                    Required Elements:
                    Objective: Clearly define the objective of the lesson based on the user's input, ensuring alignment with the specified standard or objective
                    Assessment: Develop an assessment method where students create something by using everyday materials, aligning with the chosen standard or objective
                    Key Points: Highlight key points about the specified topic and standard
                    Opening: Create an engaging opening activity related to the chosen topic and grade level
                    Introduction to New Material: Tailor the introduction based on the specified grade level, topic, and additional criteria. Use visual aids accordingly. Address one common misconception:
                    Guided Practice: Adjust the guided practice, considering the user's input and ensuring it aligns with the chosen grade level, topic, and standard
                    Independent Practice: Design independent practice activities reflecting the user's input and demonstrating mastery of the objective
                    Closing: Develop a closing activity aligned with the chosen grade level, topic, and standard. Summarize key points accordingly
                    Extension Activity: Include an extension activity that aligns with the user's specified criteria
                    Homework: Craft a homework assignment based on the user's input, encouraging students to observe and record relevant details
                    Standards Addressed: Align the lesson plan with the selected educational standards, as specified by the user
                    Be creative and thoughtful in your approach. Your lesson should not only demonstrate your understanding of the subject matter but also showcase your ability to apply it in a real-world context. Feel free to include any relevant theme worksheets, examples, or warm up activity to support lesson plan.
                    Develop 2 potential questions which a teacher may want to ask in order to further improve the lesson plan generated by you in list format with title "Follow on questions".
                    """
                    # initial_message = {'role': 'system', 'content': 'You are a helpful assistant thats an expert on lesson planning. Answer the last question asked by the user in the message stream in a new section and after the answer provide two follow-on questions to that answer in list format with title "Follow on questions".'}

                    # print("messages[-1]['content']")
                    if messages:
                        last_msg = messages[-1]['content'] +". Develop 2 potential questions which a teacher may want to ask in order to further improve the lesson plan generated by you in list format with title 'Follow on questions'."
                        messages[-1]['content'] = last_msg
                    response, suggestions = get_response_from_openai(prompt, messages)
                    print(response)
                    print(suggestions)
                    if response:
                        return HttpResponse(json.dumps({'Success': 'Succesfully fetched response.', 'response': response, 'suggestions': suggestions}), content_type="application/json", status=status.HTTP_200_OK)
                    else:
                        return HttpResponse(json.dumps({'Failure': 'Issue in fetching response. Please try again.'}), content_type="application/json", status=status.HTTP_200_OK)
                else:
                    return HttpResponse(json.dumps({'Failure': 'Invalid request.'}), content_type="application/json", status=status.HTTP_200_OK)
            else:
                return HttpResponse(json.dumps({'Failure': 'Invalid Token.'}),content_type="application/json", status=status.HTTP_200_OK)
        else:
            return HttpResponse(json.dumps({'Failure': 'Invalid Token.'}),content_type="application/json", status=status.HTTP_200_OK)
    except Exception as e:
        print(e)
        print('Exception in toolsApp.views.get_lesson_planner_response')
        return HttpResponse(json.dumps({'Failure': 'Exception occured in get_lesson_planner_response.'}),content_type="application/json", status=status.HTTP_200_OK)    